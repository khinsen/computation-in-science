fmod differentiation is
    protecting RAT .
    sorts Variable Expression .
    subsort Variable < Expression .
    subsort Rat < Expression .
    vars X Y : Expression .
    var V : Variable .
    var N : Int .

    op diff : Expression Variable -> Expression .
    eq diff(V, V) = 1 .

    op _+_ : Expression Expression -> Expression [ditto] .
    eq diff(X + Y, V)  = diff(X, V) + diff(Y, V) .
    eq X + 0 = X .

    op -_ : Expression -> Expression [ditto] .
    op _-_ : Expression Expression -> Expression [ditto] .
    eq diff(- X, V)  = - diff(X, V) .
    eq diff(X - Y, V)  = diff(X, V) - diff(Y, V) .
    eq X + (- Y) = X - Y .
    eq X - 0 = X .
    eq 0 - X = - X .
    eq X - X = 0 .

    op _*_ : Expression Expression -> Expression [ditto] .
    eq diff(X * Y, V) = (diff(X, V) * Y) + (X * diff(Y, V)) .
    eq X * 1 = X .
    eq X * 0 = 0 .
    eq X * (- Y) = - (X * Y) .

    op power : Expression Int -> Expression .
    eq power(X, 1) = X .
    eq diff(power(X, N), V) = N * power(X, N - 1) * diff(X, V) .

    op _/_ : Expression Expression -> Expression [ditto] .
    eq diff(X / Y, V) = diff(X * power(Y, -1), V) .

    op sin : Expression -> Expression .
    op cos : Expression -> Expression .
    eq diff(sin(X), V) = cos(X) * diff(X, V) .
    eq diff(cos(X), V) = - sin(X) * diff(X, V) .

    op exp : Expression -> Expression .
    eq diff(exp(X), V) = exp(X) * diff(X, V) .
endfm

fmod example is
    including differentiation .
    op x : -> Variable .
    op y : -> Variable .
    eq diff(x, y) = 0 .
    eq diff(y, x) = 0 .
endfm

reduce diff(power(sin(x), 2), x) .
reduce diff(cos(x * y), x) .
reduce diff(cos(x * y), y) .
reduce diff(sin(x) / x, x) .
reduce diff(exp(power(x, 2)), x) .
